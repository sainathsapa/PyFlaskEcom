# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    
    Python36:
      python.version: '3.6'
    

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install flask flask_mongoengine pymongo
    curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
    apt-key list
    echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
    sudo apt update -y
    sudo apt install mongodb-org
    sudo systemctl start mongod.service
    sudo systemctl status mongod
    sudo systemctl enable mongod

  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    echo "========================"
    echo "defult PyTest"
    echo "========================"
    pytest
  displayName: 'pytest - Mandidate'

- script: |
    pip install pylint
    echo "========================"
    echo "Bonus PyLint"
    echo "========================"
    pylint test_app.py
  displayName: 'PyLint - Bonus'
  

- script: |
    pip install pyflakes
    echo "========================"
    echo "Bonus PyFlakes"
    echo "========================"
    pyflakes test_app.py
  displayName: 'PyFlakes - Bonus'

- script: |
    pip install pycodestyle
    echo "========================"
    echo "Bonus PyCodeStyle"
    echo "========================"
    pycodestyle test_app.py
  displayName: 'PyCodeStyle - Bonus'



# Copying Build Stage File
- task: CopyFiles@2
  inputs:
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copying Files to Stage Area'

# Paste Files to Pipeline
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'PythonBuildFiles'
    publishLocation: 'Container'
  displayName: 'Publishing Artifacts'
